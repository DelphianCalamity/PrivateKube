/*
Copyright (c) 2020 Mingen Pan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "columbia.github.com/privatekube/privacyresource/pkg/apis/columbia.github.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivacyBudgetClaimLister helps list PrivacyBudgetClaims.
type PrivacyBudgetClaimLister interface {
	// List lists all PrivacyBudgetClaims in the indexer.
	List(selector labels.Selector) (ret []*v1.PrivacyBudgetClaim, err error)
	// PrivacyBudgetClaims returns an object that can list and get PrivacyBudgetClaims.
	PrivacyBudgetClaims(namespace string) PrivacyBudgetClaimNamespaceLister
	PrivacyBudgetClaimListerExpansion
}

// privacyBudgetClaimLister implements the PrivacyBudgetClaimLister interface.
type privacyBudgetClaimLister struct {
	indexer cache.Indexer
}

// NewPrivacyBudgetClaimLister returns a new PrivacyBudgetClaimLister.
func NewPrivacyBudgetClaimLister(indexer cache.Indexer) PrivacyBudgetClaimLister {
	return &privacyBudgetClaimLister{indexer: indexer}
}

// List lists all PrivacyBudgetClaims in the indexer.
func (s *privacyBudgetClaimLister) List(selector labels.Selector) (ret []*v1.PrivacyBudgetClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PrivacyBudgetClaim))
	})
	return ret, err
}

// PrivacyBudgetClaims returns an object that can list and get PrivacyBudgetClaims.
func (s *privacyBudgetClaimLister) PrivacyBudgetClaims(namespace string) PrivacyBudgetClaimNamespaceLister {
	return privacyBudgetClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivacyBudgetClaimNamespaceLister helps list and get PrivacyBudgetClaims.
type PrivacyBudgetClaimNamespaceLister interface {
	// List lists all PrivacyBudgetClaims in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PrivacyBudgetClaim, err error)
	// Get retrieves the PrivacyBudgetClaim from the indexer for a given namespace and name.
	Get(name string) (*v1.PrivacyBudgetClaim, error)
	PrivacyBudgetClaimNamespaceListerExpansion
}

// privacyBudgetClaimNamespaceLister implements the PrivacyBudgetClaimNamespaceLister
// interface.
type privacyBudgetClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivacyBudgetClaims in the indexer for a given namespace.
func (s privacyBudgetClaimNamespaceLister) List(selector labels.Selector) (ret []*v1.PrivacyBudgetClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PrivacyBudgetClaim))
	})
	return ret, err
}

// Get retrieves the PrivacyBudgetClaim from the indexer for a given namespace and name.
func (s privacyBudgetClaimNamespaceLister) Get(name string) (*v1.PrivacyBudgetClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("privacybudgetclaim"), name)
	}
	return obj.(*v1.PrivacyBudgetClaim), nil
}
