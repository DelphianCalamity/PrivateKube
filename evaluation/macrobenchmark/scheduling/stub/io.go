package stub

import (
	columbiav1 "columbia.github.com/privatekube/privacyresource/pkg/apis/columbia.github.com/v1"
	"log"
	"os"
)

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"gopkg.in/yaml.v2"
	"io/ioutil"
	"path/filepath"
	"strconv"
	"strings"
)

func LoadPipeline(filename string) (*RawPipeline, error) {
	buf, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	c := &RawPipeline{}
	err = yaml.Unmarshal(buf, c)
	if err != nil {
		return nil, fmt.Errorf("file %q: %v", filename, err)
	}

	return c, nil
}

func LoadDir(path string) map[string]RawPipeline {
	filenames, _ := filepath.Glob(path + "/*.yaml")
	pipelines := make(map[string]RawPipeline)
	for _, filename := range filenames {
		p, err := LoadPipeline(filename)
		if err == nil {
			basename := filepath.Base(filename)
			name := strings.TrimSuffix(basename, filepath.Ext(basename))
			pipelines[name] = *p
		}
	}
	return pipelines
}
func listify(field string) []float64 {
	s := strings.Split(strings.Trim(field, "[]"), ", ")

	var floats []float64
	for _, x := range s {
		f, _ := strconv.ParseFloat(x, 64)
		floats = append(floats, f)
	}
	return floats
}

func ReadTasks(path string) []Pipeline {
	f, err := os.Open(path + "/privacy_tasks.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	csvReader := csv.NewReader(f)
	data, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal(err)
	}
	var pipelines []Pipeline
	//max_task_interval := 0.0
	for i, line := range data {
		if i > 0 { // omit header line

			epsilon, _ := strconv.ParseFloat(line[0], 64)
			//delta := line[1]
			nBlocks, _ := strconv.Atoi(line[2])
			profit, _ := strconv.ParseFloat(line[3], 64)
			//blockSelectionPolicy := line[4]
			taskName := line[5]
			alphas := listify(line[6])
			rdpEpsilons := listify(line[7])
			relativesubmitTime, _ := strconv.ParseFloat(line[8], 64)
			submitTime, _ := strconv.ParseFloat(line[9], 64)

			b := make(columbiav1.RenyiBudget, len(alphas))
			for i, alpha := range alphas {
				b[i].Alpha = alpha
				b[i].Epsilon = rdpEpsilons[i]
			}
			demand := columbiav1.PrivacyBudget{
				EpsDel: nil,
				Renyi:  b,
			}

			pipeline := Pipeline{
				Name:                 taskName,
				Demand:               demand,
				NBlocks:              nBlocks,
				Epsilon:              epsilon,
				Profit:               profit,
				Type:                 0,
				relative_submit_time: relativesubmitTime,
				submit_time:          submitTime,
			}
			//fmt.Println("task_name", taskName)

			pipelines = append(pipelines, pipeline)
		}
	}
	max_task_interval := pipelines[len(pipelines)-1].submit_time - pipelines[0].submit_time
	//fmt.Println("max", max_task_interval)
	//sum := 0.0
	relative_submit_time := 0.0
	submit_time := 0.0
	for i, _ := range pipelines {
		if i > 0 {
			relative_submit_time = pipelines[i].submit_time - submit_time
		}
		submit_time = pipelines[i].submit_time

		//sum += relative_submit_time //pipelines[i].relative_submit_time
		pipelines[i].relative_submit_time = relative_submit_time / max_task_interval
		//fmt.Println(pipelines[i].relative_submit_time)
		//fmt.Println("relative", pipelines[i].relative_submit_time*10.0)
		//fmt.Println("submit:", pipelines[i].submit_time*10)
		//fmt.Println("\n")
	}
	//fmt.Println("sum", sum)

	//sum = 0.0
	//for i, _ := range pipelines {
	//	sum += pipelines[i].relative_submit_time
	//}
	//fmt.Println("sum", sum)
	return pipelines
}

func SaveObjects(objects []interface{}, filename string) {
	file, err := json.Marshal(objects)
	if err == nil {
		_ = ioutil.WriteFile(filename, file, 0644)
	}
}

type RawPipeline struct {
	Model       string    `yaml:"model"`
	NBlocks     int       `yaml:"n_blocks"`
	Alphas      []float64 `yaml:"alphas"`
	RdpEpsilons []float64 `yaml:"rdp_epsilons"`
	Delta       float64   `yaml:"delta"`
	Epsilon     float64   `yaml:"epsilon"`
	Profit      float64   `yaml:"profit"`
}

// Autogenerated with https://yaml2go.prasadg.dev/
type RawNNPipeline struct {
	Alphas                   []float64 `yaml:"alphas"`
	Model                    string    `yaml:"model"`
	PerLayerClipping         int       `yaml:"per_layer_clipping"`
	TimeframeDays            int       `yaml:"timeframe_days"`
	TrainSize                int       `yaml:"train_size"`
	MaxTextLen               int       `yaml:"max_text_len"`
	Noise                    float64   `yaml:"noise"`
	TotalTime                float64   `yaml:"total_time"`
	VocabSize                int       `yaml:"vocab_size"`
	Dropout                  float64   `yaml:"dropout"`
	EmbeddingDim             int       `yaml:"embedding_dim"`
	HiddenDim                int       `yaml:"hidden_dim"`
	HiddenDim2               int       `yaml:"hidden_dim_2"`
	LearningRateScheduler    int       `yaml:"learning_rate_scheduler"`
	Loss                     float64   `yaml:"loss"`
	Dp                       int       `yaml:"dp"`
	DynamicClipping          int       `yaml:"dynamic_clipping"`
	TrainingAccuracyEpochs   []float64 `yaml:"training_accuracy_epochs"`
	UserLevel                int       `yaml:"user_level"`
	LearningRate             float64   `yaml:"learning_rate"`
	NBlocks                  int       `yaml:"n_blocks"`
	Task                     string    `yaml:"task"`
	TrainingTime             float64   `yaml:"training_time"`
	AdaptiveBatchSize        int       `yaml:"adaptive_batch_size"`
	BatchSize                int       `yaml:"batch_size"`
	Delta                    float64   `yaml:"delta"`
	HiddenDim1               int       `yaml:"hidden_dim_1"`
	TargetEpsilon            float64   `yaml:"target_epsilon"`
	VirtualBatchMultiplier   int       `yaml:"virtual_batch_multiplier"`
	Accuracy                 float64   `yaml:"accuracy"`
	Device                   string    `yaml:"device"`
	Epsilon                  float64   `yaml:"epsilon"`
	NEpochs                  int       `yaml:"n_epochs"`
	RdpEpsilons              []float64 `yaml:"rdp_epsilons"`
	TestSize                 int       `yaml:"test_size"`
	TrainingLossEpochs       []float64 `yaml:"training_loss_epochs"`
	BestAlpha                float64   `yaml:"best_alpha"`
	DpEval                   int       `yaml:"dp_eval"`
	MaxGradNorm              float64   `yaml:"max_grad_norm"`
	NBlocksTest              int       `yaml:"n_blocks_test"`
	NTrainableParameters     int       `yaml:"n_trainable_parameters"`
	NWorkers                 int       `yaml:"n_workers"`
	ValidationAccuracyEpochs []float64 `yaml:"validation_accuracy_epochs"`
	ValidationLossEpochs     []float64 `yaml:"validation_loss_epochs"`
}
